/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Visao;

import Dao.ControleAcessoGeral;
import Dao.LogSistemaDao;
import Dao.SolicitacaoAtendimentoDao;
import Modelo.CamposAcessos;
import Modelo.LogSistema;
import Modelo.SolicitacaoAtendimentoUsuarios;
import static Visao.LoginHD.nameUser;
import static Visao.LoginHD.nomeUserRegistro;
import static Visao.LoginHD.pDATA_sistema;
import static Visao.LoginHD.pHORA_sistema;
import static Visao.LoginHD.tipoServidor;
import static Visao.LoginHD.pCODIGO_unidade;
import static Visao.LoginHD.pSETOR_usuario;
import java.awt.Color;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import static Visao.TelaSolicitacaoAtendimentoUsuarios.telaChamadosSolicitacaoUsuarios;

/**
 *
 * @author ronal
 */
public class TelaSolicitacaoUsuario extends javax.swing.JInternalFrame {

    SolicitacaoAtendimentoUsuarios objSolicita = new SolicitacaoAtendimentoUsuarios();
    SolicitacaoAtendimentoDao DAOs = new SolicitacaoAtendimentoDao();
    //
    ControleAcessoGeral pPESQUISAR_acessos = new ControleAcessoGeral();
    CamposAcessos objCampos = new CamposAcessos();
    //
    LogSistemaDao controlLog = new LogSistemaDao();
    LogSistema objLogSys = new LogSistema();
    // Variáveis para gravar o log
    String nomeModuloTela = "Suporte Técnico:Solicitação de Atendimento Técnico:Manutenção";
    String statusMov;
    String horaMov;
    String dataModFinal;
    int flag = 0;
    int acao = 0;
    public static int pTOTAL_registros = 0;
    public static String pRESPOSTA = "";
    String pDATA_Registros = "";
    //NOME E IP DO COMPUTADOR
    public static String hostNameSRV;
    public static String ipHostSRV;
    public static int nivelUsuario = 0;
    public static String nomeSolicitante = "";
    public static String dataInicial;
    public static String dataFinal;
    //
    public static String idSolicitacaoTabela = "";

    /**
     * Creates new form TelaSolicitacaoUsuario
     */
    public TelaSolicitacaoUsuario() {
        initComponents();
        BUSCAR_NOME_IP_desktop();
        corCampos();
        formatarCampos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jBtPesqCHData = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jIdRegistroSolicitantePesquisa = new javax.swing.JTextField();
        jBtPesqCHCodigo = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jDataPesqInicial = new com.toedter.calendar.JDateChooser();
        jDataPesFinal = new com.toedter.calendar.JDateChooser();
        jCheckBoxTodosCH = new javax.swing.JCheckBox();
        jLabel20 = new javax.swing.JLabel();
        jComboBoxStatusPesquisa = new javax.swing.JComboBox<>();
        jBtStatus = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        jBtTipoSolicitacao = new javax.swing.JButton();
        jComboBoxTipoSolicitacaoPesquisa = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTabelaSolicitacao = new javax.swing.JTable();
        jPanel31 = new javax.swing.JPanel();
        jPanel30 = new javax.swing.JPanel();
        jLabel63 = new javax.swing.JLabel();
        jPanel32 = new javax.swing.JPanel();
        jtotalRegistros = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jIdRegistroSolicitante = new javax.swing.JTextField();
        jStatusSolicitacao = new javax.swing.JTextField();
        jNomeSolicitante = new javax.swing.JTextField();
        jNomeComputadorSolicitante = new javax.swing.JTextField();
        jIPComputadorSolicitante = new javax.swing.JTextField();
        jComboBoxNomeTecnico = new javax.swing.JComboBox<>();
        jDataSolicitacao = new com.toedter.calendar.JDateChooser();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jDepartamentoSolicitante = new javax.swing.JTextField();
        jComboBoxTipoSolicitacao = new javax.swing.JComboBox<>();
        jPanel4 = new javax.swing.JPanel();
        jBtNovo = new javax.swing.JButton();
        jBtAlterar = new javax.swing.JButton();
        jBtExcluir = new javax.swing.JButton();
        jBtSalvar = new javax.swing.JButton();
        jBtCancelar = new javax.swing.JButton();
        jBtSair = new javax.swing.JButton();
        jBtAuditoria = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextoSolicitacao = new javax.swing.JTextArea();

        setClosable(true);
        setIconifiable(true);
        setTitle("...::: Solicitação de Suporte Técnico :::...");

        jTabbedPane1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true)));

        jBtPesqCHData.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/Lupas_1338_05.gif"))); // NOI18N
        jBtPesqCHData.setContentAreaFilled(false);
        jBtPesqCHData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtPesqCHDataActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel12.setText("Código:");

        jIdRegistroSolicitantePesquisa.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jIdRegistroSolicitantePesquisa.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jBtPesqCHCodigo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/Lupas_1338_05.gif"))); // NOI18N
        jBtPesqCHCodigo.setToolTipText("Pesquisa de Chamados por Código");
        jBtPesqCHCodigo.setContentAreaFilled(false);
        jBtPesqCHCodigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtPesqCHCodigoActionPerformed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel14.setText("Data Inicial:");

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel15.setText("Data Final:");

        jDataPesqInicial.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jDataPesFinal.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jCheckBoxTodosCH.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jCheckBoxTodosCH.setText("Todos");
        jCheckBoxTodosCH.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxTodosCHItemStateChanged(evt);
            }
        });

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel20.setText("Status:");

        jComboBoxStatusPesquisa.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jComboBoxStatusPesquisa.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione...", "Aberto", "Fechado", "Atendimento" }));
        jComboBoxStatusPesquisa.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jBtStatus.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/Lupas_1338_05.gif"))); // NOI18N
        jBtStatus.setContentAreaFilled(false);
        jBtStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtStatusActionPerformed(evt);
            }
        });

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel19.setText("Tipo Solicitação:");

        jBtTipoSolicitacao.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/Lupas_1338_05.gif"))); // NOI18N
        jBtTipoSolicitacao.setContentAreaFilled(false);
        jBtTipoSolicitacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtTipoSolicitacaoActionPerformed(evt);
            }
        });

        jComboBoxTipoSolicitacaoPesquisa.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jComboBoxTipoSolicitacaoPesquisa.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione...", "Avaliação", "Correções", "Dúvidas", "Erros de Sistema", "Implementação (SISCONP)", "Manutenção Hardware (CPU)", "Manutenção Software", "Manutenção em Servidores", "Manutenção Impressoras", "Manutenção em Rede", "Melhorias (Imp. Diversas)", "Problema(s)", "Reclamação(ões)", "Sugestão(ões)", "Outros" }));
        jComboBoxTipoSolicitacaoPesquisa.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel20)
                    .addComponent(jLabel14)
                    .addComponent(jLabel12)
                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jComboBoxTipoSolicitacaoPesquisa, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel6Layout.createSequentialGroup()
                                .addComponent(jDataPesqInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel15)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jDataPesFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jComboBoxStatusPesquisa, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jBtPesqCHData, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBtTipoSolicitacao, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBtStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jIdRegistroSolicitantePesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtPesqCHCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBoxTodosCH)))
                .addGap(29, 29, 29))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(11, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jBtPesqCHCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jIdRegistroSolicitantePesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(jCheckBoxTodosCH))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel14)
                    .addComponent(jDataPesqInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15)
                    .addComponent(jDataPesFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtPesqCHData, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jBtTipoSolicitacao, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19)
                    .addComponent(jComboBoxTipoSolicitacaoPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jBtStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxStatusPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20))
                .addContainerGap())
        );

        jTabelaSolicitacao.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jTabelaSolicitacao.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Data", "Status", "Tipo Solicitação"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTabelaSolicitacao.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabelaSolicitacaoMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTabelaSolicitacao);
        if (jTabelaSolicitacao.getColumnModel().getColumnCount() > 0) {
            jTabelaSolicitacao.getColumnModel().getColumn(0).setMinWidth(70);
            jTabelaSolicitacao.getColumnModel().getColumn(0).setMaxWidth(70);
            jTabelaSolicitacao.getColumnModel().getColumn(1).setMinWidth(80);
            jTabelaSolicitacao.getColumnModel().getColumn(1).setMaxWidth(80);
            jTabelaSolicitacao.getColumnModel().getColumn(2).setMinWidth(150);
            jTabelaSolicitacao.getColumnModel().getColumn(2).setMaxWidth(150);
            jTabelaSolicitacao.getColumnModel().getColumn(3).setMinWidth(150);
            jTabelaSolicitacao.getColumnModel().getColumn(3).setMaxWidth(150);
        }

        jPanel31.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED)));

        javax.swing.GroupLayout jPanel31Layout = new javax.swing.GroupLayout(jPanel31);
        jPanel31.setLayout(jPanel31Layout);
        jPanel31Layout.setHorizontalGroup(
            jPanel31Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel31Layout.setVerticalGroup(
            jPanel31Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 14, Short.MAX_VALUE)
        );

        jPanel30.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED)));

        jLabel63.setText("Total de Registros:");

        javax.swing.GroupLayout jPanel30Layout = new javax.swing.GroupLayout(jPanel30);
        jPanel30.setLayout(jPanel30Layout);
        jPanel30Layout.setHorizontalGroup(
            jPanel30Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel30Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel63))
        );
        jPanel30Layout.setVerticalGroup(
            jPanel30Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel63)
        );

        jPanel32.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED)));

        jtotalRegistros.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        javax.swing.GroupLayout jPanel32Layout = new javax.swing.GroupLayout(jPanel32);
        jPanel32.setLayout(jPanel32Layout);
        jPanel32Layout.setHorizontalGroup(
            jPanel32Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jtotalRegistros, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
        );
        jPanel32Layout.setVerticalGroup(
            jPanel32Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jtotalRegistros, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 14, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel30, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel32, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel31, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                .addGap(4, 4, 4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jPanel30, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel32, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel31, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3))
        );

        jTabbedPane1.addTab("Listagem", jPanel1);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true)));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Código");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Status da Solicitação");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Data Solicitação");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Solicitante");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Nome Computador");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("Endereço IP");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText("Técnico");

        jIdRegistroSolicitante.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jIdRegistroSolicitante.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jIdRegistroSolicitante.setEnabled(false);

        jStatusSolicitacao.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jStatusSolicitacao.setForeground(new java.awt.Color(204, 0, 0));
        jStatusSolicitacao.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jStatusSolicitacao.setDisabledTextColor(new java.awt.Color(204, 0, 0));
        jStatusSolicitacao.setEnabled(false);

        jNomeSolicitante.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jNomeSolicitante.setEnabled(false);

        jNomeComputadorSolicitante.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jNomeComputadorSolicitante.setEnabled(false);

        jIPComputadorSolicitante.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jIPComputadorSolicitante.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jIPComputadorSolicitante.setEnabled(false);

        jComboBoxNomeTecnico.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jComboBoxNomeTecnico.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione..." }));
        jComboBoxNomeTecnico.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jComboBoxNomeTecnico.setEnabled(false);

        jDataSolicitacao.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jDataSolicitacao.setEnabled(false);

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel8.setText("Departamento/Setor");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel9.setText("Tipo de Solicitação");

        jDepartamentoSolicitante.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jDepartamentoSolicitante.setEnabled(false);

        jComboBoxTipoSolicitacao.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jComboBoxTipoSolicitacao.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione...", "Avaliação", "Correções", "Dúvidas", "Erros de Sistema", "Implementação (SISCONP)", "Manutenção Hardware (CPU)", "Manutenção Software", "Manutenção em Servidores", "Manutenção Impressoras", "Manutenção em Rede", "Melhorias (Imp. Diversas)", "Problema(s)", "Reclamação(ões)", "Sugestão(ões)", "Outros" }));
        jComboBoxTipoSolicitacao.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jComboBoxTipoSolicitacao.setEnabled(false);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBoxNomeTecnico, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jNomeSolicitante, javax.swing.GroupLayout.PREFERRED_SIZE, 407, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jIdRegistroSolicitante, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(4, 4, 4)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jStatusSolicitacao, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jDataSolicitacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jDepartamentoSolicitante, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jNomeComputadorSolicitante, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jIPComputadorSolicitante)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel6))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jComboBoxTipoSolicitacao, 0, 1, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jIdRegistroSolicitante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jStatusSolicitacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDataSolicitacao, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jNomeSolicitante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxNomeTecnico, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jNomeComputadorSolicitante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jIPComputadorSolicitante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jDepartamentoSolicitante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxTipoSolicitacao, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true)));

        jBtNovo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/page_add.png"))); // NOI18N
        jBtNovo.setToolTipText("Novo Registro");
        jBtNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtNovoActionPerformed(evt);
            }
        });

        jBtAlterar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/8437_16x16.png"))); // NOI18N
        jBtAlterar.setToolTipText("Alterar Registro");
        jBtAlterar.setEnabled(false);
        jBtAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtAlterarActionPerformed(evt);
            }
        });

        jBtExcluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/191216104515_16.png"))); // NOI18N
        jBtExcluir.setToolTipText("Excluir Registro");
        jBtExcluir.setEnabled(false);
        jBtExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtExcluirActionPerformed(evt);
            }
        });

        jBtSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/1294_16x16.png"))); // NOI18N
        jBtSalvar.setToolTipText("Gravar Registro");
        jBtSalvar.setEnabled(false);
        jBtSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtSalvarActionPerformed(evt);
            }
        });

        jBtCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/Button_Close_Icon_16.png"))); // NOI18N
        jBtCancelar.setToolTipText("Cancelar Operação");
        jBtCancelar.setEnabled(false);
        jBtCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtCancelarActionPerformed(evt);
            }
        });

        jBtSair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/shutdown-icone-6920-16.png"))); // NOI18N
        jBtSair.setToolTipText("Sair da tela");
        jBtSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtSairActionPerformed(evt);
            }
        });

        jBtAuditoria.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/book_open.png"))); // NOI18N
        jBtAuditoria.setToolTipText("Auditoria");
        jBtAuditoria.setContentAreaFilled(false);
        jBtAuditoria.setEnabled(false);
        jBtAuditoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtAuditoriaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jBtNovo, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jBtAlterar, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jBtExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jBtSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jBtCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jBtSair, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65)
                .addComponent(jBtAuditoria, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel4Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jBtAlterar, jBtCancelar, jBtExcluir, jBtNovo, jBtSalvar});

        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBtAuditoria, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jBtSair)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jBtCancelar)
                                .addComponent(jBtSalvar)
                                .addComponent(jBtExcluir)
                                .addComponent(jBtAlterar)
                                .addComponent(jBtNovo, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(4, 4, 4))
        );

        jPanel4Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jBtAlterar, jBtCancelar, jBtExcluir, jBtNovo, jBtSair, jBtSalvar});

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true), "Texto da Solicitação", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), new java.awt.Color(0, 153, 0))); // NOI18N

        jScrollPane1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jTextoSolicitacao.setColumns(20);
        jTextoSolicitacao.setRows(5);
        jTextoSolicitacao.setEnabled(false);
        jScrollPane1.setViewportView(jTextoSolicitacao);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Manutenção", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 454, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        setBounds(300, 60, 471, 484);
    }// </editor-fold>//GEN-END:initComponents

    private void jBtPesqCHDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtPesqCHDataActionPerformed
        // TODO add your handling code here:
        nomeSolicitante = nameUser;
        DAOs.BUSCAR_NIVEL_acesso();
        pTOTAL_registros = 0;
        flag = 1;
        if (tipoServidor == null || tipoServidor.equals("")) {
            JOptionPane.showMessageDialog(rootPane, "É necessário definir o parâmtero para o sistema operacional utilizado no servidor, (UBUNTU-LINUX ou WINDOWS SERVER).");
        } else if (tipoServidor.equals("Servidor Linux (Ubuntu)/MS-SQL Server")) {
            if (nameUser.equals("ADMINISTRADOR DO SISTEMA")) {
                if (jDataPesqInicial.getDate() == null) {
                    JOptionPane.showMessageDialog(rootPane, "Informe a data inicial para pesquisa.");
                    jDataPesqInicial.requestFocus();
                } else {
                    if (jDataPesFinal.getDate() == null) {
                        JOptionPane.showMessageDialog(rootPane, "Informe a data final para pesquisa.");
                        jDataPesFinal.requestFocus();
                    } else {
                        if (jDataPesqInicial.getDate().after(jDataPesFinal.getDate())) {
                            JOptionPane.showMessageDialog(rootPane, "Data Inicial não pode ser maior que data final");
                        } else {
                            SimpleDateFormat formatoAmerica = new SimpleDateFormat("yyyy/MM/dd");
                            dataInicial = formatoAmerica.format(jDataPesqInicial.getDate().getTime());
                            dataFinal = formatoAmerica.format(jDataPesFinal.getDate().getTime());
                            pLIMPAR_tabela();
                            MOSTAR_DADOS_data();
                            if (pTOTAL_registros == 0) {
                                JOptionPane.showMessageDialog(rootPane, "Não existe registros a serem exibidos.");
                            }
                        }
                    }
                }
            } else if (nivelUsuario == 0 || nivelUsuario == 1) {
                if (nameUser.equals("ADMINISTRADOR DO SISTEMA")) {
                    if (jDataPesqInicial.getDate() == null) {
                        JOptionPane.showMessageDialog(rootPane, "Informe a data inicial para pesquisa.");
                        jDataPesqInicial.requestFocus();
                    } else {
                        if (jDataPesFinal.getDate() == null) {
                            JOptionPane.showMessageDialog(rootPane, "Informe a data final para pesquisa.");
                            jDataPesFinal.requestFocus();
                        } else {
                            if (jDataPesqInicial.getDate().after(jDataPesFinal.getDate())) {
                                JOptionPane.showMessageDialog(rootPane, "Data Inicial não pode ser maior que data final");
                            } else {
                                SimpleDateFormat formatoAmerica = new SimpleDateFormat("yyyy/MM/dd");
                                dataInicial = formatoAmerica.format(jDataPesqInicial.getDate().getTime());
                                dataFinal = formatoAmerica.format(jDataPesFinal.getDate().getTime());
                                pLIMPAR_tabela();
                                MOSTRAR_DADOS_DATAS_NIVEL_1();
                                if (pTOTAL_registros == 0) {
                                    JOptionPane.showMessageDialog(rootPane, "Não existe registros a serem exibidos.");
                                }
                            }
                        }
                    }
                }
            } else if (nivelUsuario == 2) {
                if (jDataPesqInicial.getDate() == null) {
                    JOptionPane.showMessageDialog(rootPane, "Informe a data inicial para pesquisa.");
                    jDataPesqInicial.requestFocus();
                } else {
                    if (jDataPesFinal.getDate() == null) {
                        JOptionPane.showMessageDialog(rootPane, "Informe a data final para pesquisa.");
                        jDataPesFinal.requestFocus();
                    } else {
                        if (jDataPesqInicial.getDate().after(jDataPesFinal.getDate())) {
                            JOptionPane.showMessageDialog(rootPane, "Data Inicial não pode ser maior que data final");
                        } else {
                            SimpleDateFormat formatoAmerica = new SimpleDateFormat("yyyy/MM/dd");
                            dataInicial = formatoAmerica.format(jDataPesqInicial.getDate().getTime());
                            dataFinal = formatoAmerica.format(jDataPesFinal.getDate().getTime());
                            pLIMPAR_tabela();
                            MOSTRAR_DADOS_DATAS_NIVEL_2();
                            if (pTOTAL_registros == 0) {
                                JOptionPane.showMessageDialog(rootPane, "Não existe registros a serem exibidos.");
                            }
                        }
                    }
                }
            }
        } else if (tipoServidor.equals("Servidor Windows/MS-SQL Server")) {
            if (nameUser.equals("ADMINISTRADOR DO SISTEMA")) {
                if (jDataPesqInicial.getDate() == null) {
                    JOptionPane.showMessageDialog(rootPane, "Informe a data inicial para pesquisa.");
                    jDataPesqInicial.requestFocus();
                } else {
                    if (jDataPesFinal.getDate() == null) {
                        JOptionPane.showMessageDialog(rootPane, "Informe a data final para pesquisa.");
                        jDataPesFinal.requestFocus();
                    } else {
                        if (jDataPesqInicial.getDate().after(jDataPesFinal.getDate())) {
                            JOptionPane.showMessageDialog(rootPane, "Data Inicial não pode ser maior que data final");
                        } else {
                            SimpleDateFormat formatoAmerica = new SimpleDateFormat("dd/MM/yyyy");
                            dataInicial = formatoAmerica.format(jDataPesqInicial.getDate().getTime());
                            dataFinal = formatoAmerica.format(jDataPesFinal.getDate().getTime());
                            pLIMPAR_tabela();
                            MOSTAR_DADOS_data();
                            if (pTOTAL_registros == 0) {
                                JOptionPane.showMessageDialog(rootPane, "Não existe registros a serem exibidos.");
                            }
                        }
                    }
                }
            } else if (nivelUsuario == 0 || nivelUsuario == 1) {
                if (jDataPesqInicial.getDate() == null) {
                    JOptionPane.showMessageDialog(rootPane, "Informe a data inicial para pesquisa.");
                    jDataPesqInicial.requestFocus();
                } else {
                    if (jDataPesFinal.getDate() == null) {
                        JOptionPane.showMessageDialog(rootPane, "Informe a data final para pesquisa.");
                        jDataPesFinal.requestFocus();
                    } else {
                        if (jDataPesqInicial.getDate().after(jDataPesFinal.getDate())) {
                            JOptionPane.showMessageDialog(rootPane, "Data Inicial não pode ser maior que data final");
                        } else {
                            SimpleDateFormat formatoAmerica = new SimpleDateFormat("dd/MM/yyyy");
                            dataInicial = formatoAmerica.format(jDataPesqInicial.getDate().getTime());
                            dataFinal = formatoAmerica.format(jDataPesFinal.getDate().getTime());
                            pLIMPAR_tabela();
                            MOSTRAR_DADOS_DATAS_NIVEL_1();
                            if (pTOTAL_registros == 0) {
                                JOptionPane.showMessageDialog(rootPane, "Não existe registros a serem exibidos.");
                            }
                        }
                    }
                }
            } else if (nivelUsuario == 2) {
                if (jDataPesqInicial.getDate() == null) {
                    JOptionPane.showMessageDialog(rootPane, "Informe a data inicial para pesquisa.");
                    jDataPesqInicial.requestFocus();
                } else {
                    if (jDataPesFinal.getDate() == null) {
                        JOptionPane.showMessageDialog(rootPane, "Informe a data final para pesquisa.");
                        jDataPesFinal.requestFocus();
                    } else {
                        if (jDataPesqInicial.getDate().after(jDataPesFinal.getDate())) {
                            JOptionPane.showMessageDialog(rootPane, "Data Inicial não pode ser maior que data final");
                        } else {
                            SimpleDateFormat formatoAmerica = new SimpleDateFormat("dd/MM/yyyy");
                            dataInicial = formatoAmerica.format(jDataPesqInicial.getDate().getTime());
                            dataFinal = formatoAmerica.format(jDataPesFinal.getDate().getTime());
                            pLIMPAR_tabela();
                            MOSTRAR_DADOS_DATAS_NIVEL_2();
                            if (pTOTAL_registros == 0) {
                                JOptionPane.showMessageDialog(rootPane, "Não existe registros a serem exibidos.");
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_jBtPesqCHDataActionPerformed

    private void jBtPesqCHCodigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtPesqCHCodigoActionPerformed
        // TODO add your handling code here:
        nomeSolicitante = nameUser;
        DAOs.BUSCAR_NIVEL_acesso();
        pTOTAL_registros = 0;
        flag = 1;
        if (nameUser.equals("ADMINISTRADOR DO SISTEMA")) {
            if (jIdRegistroSolicitantePesquisa.getText().equals("")) {
                JOptionPane.showMessageDialog(rootPane, "Informe o código para pesquisa.");
            } else {
                pLIMPAR_tabela();
                MOSTRAR_DADOS_CODIGO();
            }
        } else if (nivelUsuario == 0 || nivelUsuario == 1) {
            pLIMPAR_tabela();
            MOSTRAR_DADOS_CODIGO_01();
        } else if (nivelUsuario == 2) {
            if (jIdRegistroSolicitantePesquisa.getText().equals("")) {
                JOptionPane.showMessageDialog(rootPane, "Informe o código para pesquisa.");
            } else {
                pLIMPAR_tabela();
                MOSTRAR_DADOS_CODIGO_02();
            }
        }
    }//GEN-LAST:event_jBtPesqCHCodigoActionPerformed

    private void jCheckBoxTodosCHItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxTodosCHItemStateChanged
        // TODO add your handling code here:
        nomeSolicitante = nameUser;
        DAOs.BUSCAR_NIVEL_acesso();
        pTOTAL_registros = 0;
        flag = 1;
        if (nameUser.equals("ADMINISTRADOR DO SISTEMA")) {
            if (evt.getStateChange() == evt.SELECTED) {
                pLIMPAR_tabela();
                MOSTRAR_DADOS_todos();
            } else {
                jtotalRegistros.setText("");
                pLIMPAR_tabela();
            }
        } else if (nivelUsuario == 0 || nivelUsuario == 1) {
            if (evt.getStateChange() == evt.SELECTED) {
                pLIMPAR_tabela();
                MOSTRAR_DADOS_solicitantes01();
            } else {
                jtotalRegistros.setText("");
                pLIMPAR_tabela();
            }
        } else if (nivelUsuario == 2) {
            if (evt.getStateChange() == evt.SELECTED) {
                pLIMPAR_tabela();
                MOSTRAR_DADOS_solicitantes02();
            } else {
                jtotalRegistros.setText("");
                pLIMPAR_tabela();
            }
        }
    }//GEN-LAST:event_jCheckBoxTodosCHItemStateChanged

    private void jBtStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtStatusActionPerformed
        // TODO add your handling code here:
        if (nameUser.equals("ADMINISTRADOR DO SISTEMA")) {
            if (jComboBoxStatusPesquisa.getSelectedItem().equals("")) {
                JOptionPane.showMessageDialog(rootPane, "Selecione o tipo de status.");
            } else if (jComboBoxStatusPesquisa.getSelectedItem().equals("Aberto")) {
                pLIMPAR_tabela();
                MOSTRAR_STATUS_aberto();
            } else if (jComboBoxStatusPesquisa.getSelectedItem().equals("Fechado")) {
                pLIMPAR_tabela();
                MOSTRAR_STATUS_fechado();
            } else if (jComboBoxStatusPesquisa.getSelectedItem().equals("Atendimento")) {
                pLIMPAR_tabela();
                MOSTRAR_STATUS_andamento();
            }
        } else if (nivelUsuario == 0 || nivelUsuario == 1) {
            if (jComboBoxStatusPesquisa.getSelectedItem().equals("")) {
                JOptionPane.showMessageDialog(rootPane, "Selecione o tipo de status.");
            } else if (jComboBoxStatusPesquisa.getSelectedItem().equals("Aberto")) {
                pLIMPAR_tabela();
                MOSTRAR_STATUS_aberto();
            } else if (jComboBoxStatusPesquisa.getSelectedItem().equals("Fechado")) {
                pLIMPAR_tabela();
                MOSTRAR_STATUS_fechado();
            } else if (jComboBoxStatusPesquisa.getSelectedItem().equals("Atendimento")) {
                pLIMPAR_tabela();
                MOSTRAR_STATUS_andamento();
            }
        } else if (nivelUsuario == 2) {
            if (jComboBoxStatusPesquisa.getSelectedItem().equals("")) {
                JOptionPane.showMessageDialog(rootPane, "Selecione o tipo de status.");
            } else if (jComboBoxStatusPesquisa.getSelectedItem().equals("Aberto")) {
                pLIMPAR_tabela();
                MOSTRAR_STATUS_aberto();
            } else if (jComboBoxStatusPesquisa.getSelectedItem().equals("Fechado")) {
                pLIMPAR_tabela();
                MOSTRAR_STATUS_fechado();
            } else if (jComboBoxStatusPesquisa.getSelectedItem().equals("Atendimento")) {
                pLIMPAR_tabela();
                MOSTRAR_STATUS_andamento();
            }
        }
    }//GEN-LAST:event_jBtStatusActionPerformed

    private void jBtTipoSolicitacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtTipoSolicitacaoActionPerformed
        // TODO add your handling code here:
        flag = 1;
        if (jComboBoxTipoSolicitacaoPesquisa.getSelectedItem().equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Informe o tipo de solicitação para pesquisa.");
        } else {
            if (nameUser.equals("ADMINISTRADOR DO SISTEMA")) {
                pLIMPAR_tabela();
                MOSTRAR_DADOS_TIPO_SOLICITACAO_todos();
            } else if (nivelUsuario == 0 || nivelUsuario == 1) {
                pLIMPAR_tabela();
                MOSTRAR_DADOS_TIPO_solicitantes01();
            } else if (nivelUsuario == 2) {
                pLIMPAR_tabela();
                MOSTRAR_DADOS_TIPO_solicitantes02();
            }
        }
    }//GEN-LAST:event_jBtTipoSolicitacaoActionPerformed

    private void jTabelaSolicitacaoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabelaSolicitacaoMouseClicked
        // TODO add your handling code here:
        flag = 1;
        if (flag == 1) {
            idSolicitacaoTabela = "" + jTabelaSolicitacao.getValueAt(jTabelaSolicitacao.getSelectedRow(), 0);
            jIdRegistroSolicitantePesquisa.setText(idSolicitacaoTabela);
            //
            bloquearBotoes(!true);
            bloquearCampos(!true);
            //
            jBtNovo.setEnabled(true);
            jBtAlterar.setEnabled(true);
            jBtExcluir.setEnabled(true);
            jBtAuditoria.setEnabled(true);
            //
            DAOs.MOSTRA_DADOS_tabela(objSolicita);
            jIdRegistroSolicitante.setText(String.valueOf(objSolicita.getIdRegistroSolicitante()));
            jStatusSolicitacao.setText(objSolicita.getStatusSolicitacao());
            jDataSolicitacao.setDate(objSolicita.getDataSolicitacao());
            jNomeSolicitante.setText(objSolicita.getNomeSolicitante());
            jComboBoxNomeTecnico.setSelectedItem(objSolicita.getNomeTecnico());
            jNomeComputadorSolicitante.setText(objSolicita.getNomeComputadorSolicitante());
            jIPComputadorSolicitante.setText(objSolicita.getiPComputadorSolicitante());
            jDepartamentoSolicitante.setText(objSolicita.getDepartamentoSolicitante());
            jComboBoxTipoSolicitacao.setSelectedItem(objSolicita.getTipoSolicitacao());
            jTextoSolicitacao.setText(objSolicita.getTextoSolicitacao());
        }
    }//GEN-LAST:event_jTabelaSolicitacaoMouseClicked

    private void jBtNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtNovoActionPerformed
        // TODO add your handling code here:
        objCampos.setNomeUsuario(nameUser);
        objCampos.setNomeTelaAcesso(telaChamadosSolicitacaoUsuarios);
        pPESQUISAR_acessos.pesquisarUsuario(objCampos);
//        pPESQUISAR_acessos.pesquisarNivelUsuario(objCampos);
        pPESQUISAR_acessos.pesquisarTelasAcesso(objCampos);
        if (nameUser.equals("ADMINISTRADOR DO SISTEMA") || objCampos.getCodigoUsuario() == objCampos.getCodigoUsuarioAcesso() && objCampos.getNomeTelaAcesso().equals(telaChamadosSolicitacaoUsuarios) && objCampos.getCodigoIncluir() == 1) {
            statusMov = "Incluiu";
            horaMov = pHORA_sistema;
            dataModFinal = pDATA_sistema;
            acao = 1;
            BUSCAR_NOME_IP_desktop();
            BUSCAR_tecnico();
            limparCampos();
            bloquearBotoes(!true);
            habilitarCampos(true);
            Novo();
        } else {
            JOptionPane.showMessageDialog(rootPane, "Usuário não tem acesso ao registro.");
        }
    }//GEN-LAST:event_jBtNovoActionPerformed

    private void jBtAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtAlterarActionPerformed
        // TODO add your handling code here:
        objCampos.setNomeUsuario(nameUser);
        objCampos.setNomeTelaAcesso(telaChamadosSolicitacaoUsuarios);
        pPESQUISAR_acessos.pesquisarUsuario(objCampos);
//        pPESQUISAR_acessos.pesquisarNivelUsuario(objCampos);
        pPESQUISAR_acessos.pesquisarTelasAcesso(objCampos);
        if (nameUser.equals("ADMINISTRADOR DO SISTEMA") || objCampos.getCodigoUsuario() == objCampos.getCodigoUsuarioAcesso() && objCampos.getNomeTelaAcesso().equals(telaChamadosSolicitacaoUsuarios) && objCampos.getCodigoAlterar() == 1) {
            if (jStatusSolicitacao.getText().equals("ABERTO NO SOLICITANTE")) {
                DAOs.VERIFICAR_ORIGEM_usuario(objSolicita);
                if (nomeUserRegistro == null ? nameUser == null : nomeUserRegistro.equals(nameUser) || nameUser.equals("ADMINISTRADOR DO SISTEMA")) {
                    statusMov = "Alterou";
                    horaMov = pHORA_sistema;
                    dataModFinal = pDATA_sistema;
                    BUSCAR_NOME_IP_desktop();
                    BUSCAR_tecnico();
                    bloquearBotoes(!true);
                    habilitarCampos(true);
                    acao = 2;
                    Alterar();
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Esse registro foi inserido pelo " + nomeUserRegistro + " só esse usuário ou administrador do sistema poderá modificar.");
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "Esse registro não pode ser modificado, está em atendimento.");
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Usuário não tem acesso ao registro.");
        }
    }//GEN-LAST:event_jBtAlterarActionPerformed

    private void jBtExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtExcluirActionPerformed
        // TODO add your handling code here:
        objCampos.setNomeUsuario(nameUser);
        objCampos.setNomeTelaAcesso(telaChamadosSolicitacaoUsuarios);
        pPESQUISAR_acessos.pesquisarUsuario(objCampos);
//        pPESQUISAR_acessos.pesquisarNivelUsuario(objCampos);
        pPESQUISAR_acessos.pesquisarTelasAcesso(objCampos);
        if (nameUser.equals("ADMINISTRADOR DO SISTEMA") || objCampos.getCodigoUsuario() == objCampos.getCodigoUsuarioAcesso() && objCampos.getNomeTelaAcesso().equals(telaChamadosSolicitacaoUsuarios) && objCampos.getCodigoExcluir() == 1) {
            if (jStatusSolicitacao.getText().equals("ABERTO NO SOLICITANTE")) {
                DAOs.VERIFICAR_ORIGEM_usuario(objSolicita);
                if (nomeUserRegistro == null ? nameUser == null : nomeUserRegistro.equals(nameUser) || nameUser.equals("ADMINISTRADOR DO SISTEMA")) {
                    int resposta = JOptionPane.showConfirmDialog(this, "Deseja realmente excluir registro selecionado?", "Confirmação",
                            JOptionPane.YES_NO_OPTION);
                    if (resposta == JOptionPane.YES_OPTION) {
                        objSolicita.setIdRegistroSolicitante(Integer.parseInt(jIdRegistroSolicitante.getText()));
                        DAOs.excluirSolicitacaoAtencimento(objSolicita);
                        statusMov = "Excluiu";
                        horaMov = pHORA_sistema;
                        dataModFinal = pDATA_sistema;
                        limparCampos();
                        if (pRESPOSTA.equals("Sim")) {
                            JOptionPane.showMessageDialog(rootPane, "Registro excluído com sucesso.");
                        } else if (pRESPOSTA.equals("Não")) {
                            JOptionPane.showMessageDialog(rootPane, "Não foi possívep excluir o registro, tente novamente.");
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Esse registro foi inserido pelo " + nomeUserRegistro + " só esse usuário ou administrador do sistema poderá modificar.");
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "Esse registro não pode ser modificado, está em atendimento.");
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Usuário não tem acesso ao registro.");
        }
    }//GEN-LAST:event_jBtExcluirActionPerformed

    private void jBtSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtSalvarActionPerformed
        // TODO add your handling code here:
        objCampos.setNomeUsuario(nameUser);
        objCampos.setNomeTelaAcesso(telaChamadosSolicitacaoUsuarios);
        pPESQUISAR_acessos.pesquisarUsuario(objCampos);
//        pPESQUISAR_acessos.pesquisarNivelUsuario(objCampos);
        pPESQUISAR_acessos.pesquisarTelasAcesso(objCampos);
        if (nameUser.equals("ADMINISTRADOR DO SISTEMA") || objCampos.getCodigoUsuario() == objCampos.getCodigoUsuarioAcesso() && objCampos.getNomeTelaAcesso().equals(telaChamadosSolicitacaoUsuarios) && objCampos.getCodigoGravar() == 1) {
            if (jNomeSolicitante.getText().equals("Informe o nome do solicitante.")) {
                JOptionPane.showMessageDialog(rootPane, "");
            } else if (jComboBoxNomeTecnico.getSelectedItem().equals("Selecione...")) {
                JOptionPane.showMessageDialog(rootPane, "Informe o nome do técnico.");
            } else if (jNomeComputadorSolicitante.getText().equals("")) {
                JOptionPane.showMessageDialog(rootPane, "Não é possível gravar o registro sem o nome do computador.");
            } else if (jIPComputadorSolicitante.getText().equals("")) {
                JOptionPane.showMessageDialog(rootPane, "Não é possível gravar o registro sem o IP do computador.");
            } else if (jDepartamentoSolicitante.getText().equals("")) {
                JOptionPane.showMessageDialog(rootPane, "É necessário informar o nome do departamento.");
            } else if (jComboBoxTipoSolicitacao.getSelectedItem().equals("Selecione...")) {
                JOptionPane.showMessageDialog(rootPane, "Selecione o tipo de solicitação.");
            } else if (jTextoSolicitacao.getText().equals("")) {
                JOptionPane.showMessageDialog(rootPane, "É necessário informar o motivo da solicitação de atendimento.");
            } else {
                objSolicita.setStatusSolicitacao(jStatusSolicitacao.getText());
                objSolicita.setDataSolicitacao(jDataSolicitacao.getDate());
                objSolicita.setNomeSolicitante(jNomeSolicitante.getText());
                objSolicita.setNomeTecnico((String) jComboBoxNomeTecnico.getSelectedItem());
                objSolicita.setNomeComputadorSolicitante(jNomeComputadorSolicitante.getText());
                objSolicita.setiPComputadorSolicitante(jIPComputadorSolicitante.getText());
                objSolicita.setDepartamentoSolicitante(jDepartamentoSolicitante.getText());
                objSolicita.setTipoSolicitacao((String) jComboBoxTipoSolicitacao.getSelectedItem());
                objSolicita.setTextoSolicitacao(jTextoSolicitacao.getText());
                objSolicita.setIdUnidade(pCODIGO_unidade);
                if (acao == 1) {
                    objSolicita.setUsuarioInsert(nameUser);
                    objSolicita.setDataInsert(dataModFinal);
                    objSolicita.setHorarioInsert(horaMov);
                    DAOs.incluirSolicitacaoAtencimento(objSolicita);
                    BUSCAR_codigo();
                    //
                    objLog();
                    controlLog.incluirLogSistema(objLogSys); // Grava o log da operação
                    bloquearBotoes(!true);
                    bloquearCampos(!true);
                    Salvar();
                    if (pRESPOSTA.equals("Sim")) {
                        JOptionPane.showMessageDialog(rootPane, "Registro gravado com sucesso.");
                    } else if (pRESPOSTA.equals("Não")) {
                        JOptionPane.showMessageDialog(rootPane, "Não foi possívep gravar o registro, tente novamente.");
                    }
                }
                if (acao == 2) {
                    objSolicita.setUsuarioUp(nameUser);
                    objSolicita.setDataUp(dataModFinal);
                    objSolicita.setHorarioUp(horaMov);
                    objSolicita.setIdRegistroSolicitante(Integer.parseInt(jIdRegistroSolicitante.getText()));
                    DAOs.alterarSolicitacaoAtencimento(objSolicita);
                    //
                    objLog();
                    controlLog.incluirLogSistema(objLogSys); // Grava o log da operação
                    bloquearBotoes(!true);
                    bloquearCampos(!true);
                    Salvar();
                    if (pRESPOSTA.equals("Sim")) {
                        JOptionPane.showMessageDialog(rootPane, "Registro gravado com sucesso.");
                    } else if (pRESPOSTA.equals("Não")) {
                        JOptionPane.showMessageDialog(rootPane, "Não foi possívep gravar o registro, tente novamente.");
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Usuário não tem acesso ao registro.");
        }
    }//GEN-LAST:event_jBtSalvarActionPerformed

    private void jBtCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtCancelarActionPerformed
        // TODO add your handling code here:
        Cancelar();
    }//GEN-LAST:event_jBtCancelarActionPerformed

    private void jBtSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtSairActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jBtSairActionPerformed

    private void jBtAuditoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtAuditoriaActionPerformed
        // TODO add your handling code here:
        TelaAuditoriaChamdoUsuario objAudiUser = new TelaAuditoriaChamdoUsuario();
        TelaSolicitacaoAtendimentoUsuarios.jPainelDesktopUser.add(objAudiUser);
        objAudiUser.show();
    }//GEN-LAST:event_jBtAuditoriaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtAlterar;
    private javax.swing.JButton jBtAuditoria;
    private javax.swing.JButton jBtCancelar;
    private javax.swing.JButton jBtExcluir;
    private javax.swing.JButton jBtNovo;
    private javax.swing.JButton jBtPesqCHCodigo;
    private javax.swing.JButton jBtPesqCHData;
    private javax.swing.JButton jBtSair;
    private javax.swing.JButton jBtSalvar;
    private javax.swing.JButton jBtStatus;
    private javax.swing.JButton jBtTipoSolicitacao;
    private javax.swing.JCheckBox jCheckBoxTodosCH;
    public static javax.swing.JComboBox<String> jComboBoxNomeTecnico;
    public static javax.swing.JComboBox<String> jComboBoxStatusPesquisa;
    private javax.swing.JComboBox<String> jComboBoxTipoSolicitacao;
    public static javax.swing.JComboBox<String> jComboBoxTipoSolicitacaoPesquisa;
    public static com.toedter.calendar.JDateChooser jDataPesFinal;
    public static com.toedter.calendar.JDateChooser jDataPesqInicial;
    private com.toedter.calendar.JDateChooser jDataSolicitacao;
    private javax.swing.JTextField jDepartamentoSolicitante;
    private javax.swing.JTextField jIPComputadorSolicitante;
    public static javax.swing.JTextField jIdRegistroSolicitante;
    public static javax.swing.JTextField jIdRegistroSolicitantePesquisa;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField jNomeComputadorSolicitante;
    private javax.swing.JTextField jNomeSolicitante;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel32;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jStatusSolicitacao;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTabelaSolicitacao;
    private javax.swing.JTextArea jTextoSolicitacao;
    private javax.swing.JLabel jtotalRegistros;
    // End of variables declaration//GEN-END:variables

    public void corCampos() {
        jIdRegistroSolicitante.setBackground(Color.white);
        jStatusSolicitacao.setBackground(Color.white);
        jDataSolicitacao.setBackground(Color.white);
        jNomeSolicitante.setBackground(Color.white);
        jComboBoxNomeTecnico.setBackground(Color.white);
        jNomeComputadorSolicitante.setBackground(Color.white);
        jIPComputadorSolicitante.setBackground(Color.white);
        jDepartamentoSolicitante.setBackground(Color.white);
        jComboBoxTipoSolicitacao.setBackground(Color.white);
        jTextoSolicitacao.setBackground(Color.white);
    }

    public void formatarCampos() {
        jTextoSolicitacao.setLineWrap(true);
        jTextoSolicitacao.setWrapStyleWord(true);
    }

    public void bloquearBotoes(boolean opcao) {
        jBtNovo.setEnabled(opcao);
        jBtAlterar.setEnabled(opcao);
        jBtExcluir.setEnabled(opcao);
        jBtSalvar.setEnabled(opcao);
        jBtCancelar.setEnabled(opcao);
        jBtAuditoria.setEnabled(opcao);
    }

    public void bloquearCampos(boolean opcao) {
        jIdRegistroSolicitante.setEnabled(opcao);
        jStatusSolicitacao.setEnabled(opcao);
        jDataSolicitacao.setEnabled(opcao);
        jNomeSolicitante.setEnabled(opcao);
        jComboBoxNomeTecnico.setEnabled(opcao);
        jNomeComputadorSolicitante.setEnabled(opcao);
        jIPComputadorSolicitante.setEnabled(opcao);
        jDepartamentoSolicitante.setEnabled(opcao);
        jComboBoxTipoSolicitacao.setEnabled(opcao);
        jTextoSolicitacao.setEnabled(opcao);
    }

    public void limparCampos() {
        jIdRegistroSolicitante.setText("");
        jStatusSolicitacao.setText("");
        jDataSolicitacao.setDate(null);
        jNomeSolicitante.setText("");
        jComboBoxNomeTecnico.setSelectedItem("Selecione...");
        jNomeComputadorSolicitante.setText("");
        jIPComputadorSolicitante.setText("");
        jDepartamentoSolicitante.setText("");
        jComboBoxTipoSolicitacao.setSelectedItem("Selecione...");
        jTextoSolicitacao.setText("");
    }

    public void habilitarCampos(boolean opcao) {
        jComboBoxNomeTecnico.setEnabled(opcao);
        jComboBoxTipoSolicitacao.setEnabled(opcao);
        jTextoSolicitacao.setEnabled(opcao);
    }

    public void Novo() {
        jStatusSolicitacao.setText("ABERTO NO SOLICITANTE");
        jDataSolicitacao.setCalendar(Calendar.getInstance());
        jNomeSolicitante.setText(nameUser);
        jNomeComputadorSolicitante.setText(hostNameSRV);
        jIPComputadorSolicitante.setText(ipHostSRV);
        jDepartamentoSolicitante.setText(pSETOR_usuario);
        //
        jBtSalvar.setEnabled(true);
        jBtCancelar.setEnabled(true);
    }

    public void Alterar() {
        jNomeComputadorSolicitante.setText(hostNameSRV);
        jIPComputadorSolicitante.setText(ipHostSRV);
        jDepartamentoSolicitante.setText(pSETOR_usuario);
        //
        jBtSalvar.setEnabled(true);
        jBtCancelar.setEnabled(true);
    }

    public void Excluir() {
        jBtNovo.setEnabled(true);
    }

    public void Salvar() {
        jBtNovo.setEnabled(true);
        jBtAlterar.setEnabled(true);
        jBtExcluir.setEnabled(true);
        jBtAuditoria.setEnabled(true);
    }

    public void Cancelar() {
        if (jIdRegistroSolicitante.getText().equals("")) {
            limparCampos();
            bloquearBotoes(!true);
            bloquearCampos(!true);
            //
            jBtNovo.setEnabled(true);
        } else {
            bloquearBotoes(!true);
            bloquearCampos(!true);
            MOSTRAR_DADOS_gravado();
            //
            jBtNovo.setEnabled(true);
            jBtAlterar.setEnabled(true);
            jBtExcluir.setEnabled(true);
            jBtAuditoria.setEnabled(true);
        }
    }

    public void BUSCAR_codigo() {
        DAOs.pBUSCAR_codigo(objSolicita);
    }

    public void MOSTRAR_DADOS_gravado() {
        DAOs.MOSTRA_PESQUISA_CANCELAR_operacao(objSolicita);
    }

    public void pLIMPAR_tabela() {
        // APAGAR DADOS DA TABELA
        while (jTabelaSolicitacao.getModel().getRowCount() > 0) {
            ((DefaultTableModel) jTabelaSolicitacao.getModel()).removeRow(0);
        }
        jtotalRegistros.setText("");
    }

    public void MOSTRAR_DADOS_todos() {
        DefaultTableModel dadosOrigem = (DefaultTableModel) jTabelaSolicitacao.getModel();
        try {
            for (SolicitacaoAtendimentoUsuarios dd : DAOs.PESQUISAR_TODOS_read()) {
                pDATA_Registros = String.valueOf(dd.getDataSolicitacao());
                String dia = pDATA_Registros.substring(8, 10);
                String mes = pDATA_Registros.substring(5, 7);
                String ano = pDATA_Registros.substring(0, 4);
                pDATA_Registros = dia + "/" + mes + "/" + ano;
                jtotalRegistros.setText(Integer.toString(pTOTAL_registros));
                dadosOrigem.addRow(new Object[]{dd.getIdRegistroSolicitante(), pDATA_Registros, dd.getStatusSolicitacao(), dd.getNomeSolicitante()});
                // BARRA DE ROLAGEM HORIZONTAL
                jTabelaSolicitacao.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                // ALINHAR TEXTO DA TABELA CENTRALIZADO
                DefaultTableCellRenderer centralizado = new DefaultTableCellRenderer();
                centralizado.setHorizontalAlignment(SwingConstants.CENTER);
                //
                jTabelaSolicitacao.getColumnModel().getColumn(0).setCellRenderer(centralizado);
                jTabelaSolicitacao.getColumnModel().getColumn(1).setCellRenderer(centralizado);
            }
        } catch (Exception ex) {
            Logger.getLogger(TelaChamadoSuporte.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void MOSTRAR_DADOS_solicitantes01() {
        DefaultTableModel dadosOrigem = (DefaultTableModel) jTabelaSolicitacao.getModel();
        try {
            for (SolicitacaoAtendimentoUsuarios dd : DAOs.PESQUISAR_TODOS_SOLICITANTE01_read()) {
                pDATA_Registros = String.valueOf(dd.getDataSolicitacao());
                String dia = pDATA_Registros.substring(8, 10);
                String mes = pDATA_Registros.substring(5, 7);
                String ano = pDATA_Registros.substring(0, 4);
                pDATA_Registros = dia + "/" + mes + "/" + ano;
                jtotalRegistros.setText(Integer.toString(pTOTAL_registros));
                dadosOrigem.addRow(new Object[]{dd.getIdRegistroSolicitante(), pDATA_Registros, dd.getStatusSolicitacao(), dd.getNomeSolicitante()});
                // BARRA DE ROLAGEM HORIZONTAL
                jTabelaSolicitacao.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                // ALINHAR TEXTO DA TABELA CENTRALIZADO
                DefaultTableCellRenderer centralizado = new DefaultTableCellRenderer();
                centralizado.setHorizontalAlignment(SwingConstants.CENTER);
                //
                jTabelaSolicitacao.getColumnModel().getColumn(0).setCellRenderer(centralizado);
                jTabelaSolicitacao.getColumnModel().getColumn(1).setCellRenderer(centralizado);
            }
        } catch (Exception ex) {
            Logger.getLogger(TelaChamadoSuporte.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void MOSTRAR_DADOS_solicitantes02() {
        DefaultTableModel dadosOrigem = (DefaultTableModel) jTabelaSolicitacao.getModel();
        try {
            for (SolicitacaoAtendimentoUsuarios dd : DAOs.PESQUISAR_TODOS_SOLICITANTE02_read()) {
                pDATA_Registros = String.valueOf(dd.getDataSolicitacao());
                String dia = pDATA_Registros.substring(8, 10);
                String mes = pDATA_Registros.substring(5, 7);
                String ano = pDATA_Registros.substring(0, 4);
                pDATA_Registros = dia + "/" + mes + "/" + ano;
                jtotalRegistros.setText(Integer.toString(pTOTAL_registros));
                dadosOrigem.addRow(new Object[]{dd.getIdRegistroSolicitante(), pDATA_Registros, dd.getStatusSolicitacao(), dd.getNomeSolicitante()});
                // BARRA DE ROLAGEM HORIZONTAL
                jTabelaSolicitacao.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                // ALINHAR TEXTO DA TABELA CENTRALIZADO
                DefaultTableCellRenderer centralizado = new DefaultTableCellRenderer();
                centralizado.setHorizontalAlignment(SwingConstants.CENTER);
                //
                jTabelaSolicitacao.getColumnModel().getColumn(0).setCellRenderer(centralizado);
                jTabelaSolicitacao.getColumnModel().getColumn(1).setCellRenderer(centralizado);
            }
        } catch (Exception ex) {
            Logger.getLogger(TelaChamadoSuporte.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void MOSTAR_DADOS_data() {
        DefaultTableModel dadosOrigem = (DefaultTableModel) jTabelaSolicitacao.getModel();
        try {
            for (SolicitacaoAtendimentoUsuarios dd : DAOs.PESQUISAR_DATA_read()) {
                pDATA_Registros = String.valueOf(dd.getDataSolicitacao());
                String dia = pDATA_Registros.substring(8, 10);
                String mes = pDATA_Registros.substring(5, 7);
                String ano = pDATA_Registros.substring(0, 4);
                pDATA_Registros = dia + "/" + mes + "/" + ano;
                jtotalRegistros.setText(Integer.toString(pTOTAL_registros));
                dadosOrigem.addRow(new Object[]{dd.getIdRegistroSolicitante(), pDATA_Registros, dd.getStatusSolicitacao(), dd.getNomeSolicitante()});
                // BARRA DE ROLAGEM HORIZONTAL
                jTabelaSolicitacao.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                // ALINHAR TEXTO DA TABELA CENTRALIZADO
                DefaultTableCellRenderer centralizado = new DefaultTableCellRenderer();
                centralizado.setHorizontalAlignment(SwingConstants.CENTER);
                //
                jTabelaSolicitacao.getColumnModel().getColumn(0).setCellRenderer(centralizado);
                jTabelaSolicitacao.getColumnModel().getColumn(1).setCellRenderer(centralizado);
            }
        } catch (Exception ex) {
            Logger.getLogger(TelaChamadoSuporte.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void MOSTRAR_DADOS_DATAS_NIVEL_1() {
        DefaultTableModel dadosOrigem = (DefaultTableModel) jTabelaSolicitacao.getModel();
        try {
            for (SolicitacaoAtendimentoUsuarios dd : DAOs.PESQUISAR_DATA_N01_read()) {
                pDATA_Registros = String.valueOf(dd.getDataSolicitacao());
                String dia = pDATA_Registros.substring(8, 10);
                String mes = pDATA_Registros.substring(5, 7);
                String ano = pDATA_Registros.substring(0, 4);
                pDATA_Registros = dia + "/" + mes + "/" + ano;
                jtotalRegistros.setText(Integer.toString(pTOTAL_registros));
                dadosOrigem.addRow(new Object[]{dd.getIdRegistroSolicitante(), pDATA_Registros, dd.getStatusSolicitacao(), dd.getNomeSolicitante()});
                // BARRA DE ROLAGEM HORIZONTAL
                jTabelaSolicitacao.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                // ALINHAR TEXTO DA TABELA CENTRALIZADO
                DefaultTableCellRenderer centralizado = new DefaultTableCellRenderer();
                centralizado.setHorizontalAlignment(SwingConstants.CENTER);
                //
                jTabelaSolicitacao.getColumnModel().getColumn(0).setCellRenderer(centralizado);
                jTabelaSolicitacao.getColumnModel().getColumn(1).setCellRenderer(centralizado);
            }
        } catch (Exception ex) {
            Logger.getLogger(TelaChamadoSuporte.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void MOSTRAR_DADOS_DATAS_NIVEL_2() {
        DefaultTableModel dadosOrigem = (DefaultTableModel) jTabelaSolicitacao.getModel();
        try {
            for (SolicitacaoAtendimentoUsuarios dd : DAOs.PESQUISAR_DATA_N02_read()) {
                pDATA_Registros = String.valueOf(dd.getDataSolicitacao());
                String dia = pDATA_Registros.substring(8, 10);
                String mes = pDATA_Registros.substring(5, 7);
                String ano = pDATA_Registros.substring(0, 4);
                pDATA_Registros = dia + "/" + mes + "/" + ano;
                jtotalRegistros.setText(Integer.toString(pTOTAL_registros));
                dadosOrigem.addRow(new Object[]{dd.getIdRegistroSolicitante(), pDATA_Registros, dd.getStatusSolicitacao(), dd.getNomeSolicitante()});
                // BARRA DE ROLAGEM HORIZONTAL
                jTabelaSolicitacao.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                // ALINHAR TEXTO DA TABELA CENTRALIZADO
                DefaultTableCellRenderer centralizado = new DefaultTableCellRenderer();
                centralizado.setHorizontalAlignment(SwingConstants.CENTER);
                //
                jTabelaSolicitacao.getColumnModel().getColumn(0).setCellRenderer(centralizado);
                jTabelaSolicitacao.getColumnModel().getColumn(1).setCellRenderer(centralizado);
            }
        } catch (Exception ex) {
            Logger.getLogger(TelaChamadoSuporte.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void MOSTRAR_DADOS_CODIGO() {
        DefaultTableModel dadosOrigem = (DefaultTableModel) jTabelaSolicitacao.getModel();
        try {
            for (SolicitacaoAtendimentoUsuarios dd : DAOs.PESQUISAR_CODIGO_read()) {
                pDATA_Registros = String.valueOf(dd.getDataSolicitacao());
                String dia = pDATA_Registros.substring(8, 10);
                String mes = pDATA_Registros.substring(5, 7);
                String ano = pDATA_Registros.substring(0, 4);
                pDATA_Registros = dia + "/" + mes + "/" + ano;
                jtotalRegistros.setText(Integer.toString(pTOTAL_registros));
                dadosOrigem.addRow(new Object[]{dd.getIdRegistroSolicitante(), pDATA_Registros, dd.getStatusSolicitacao(), dd.getNomeSolicitante()});
                // BARRA DE ROLAGEM HORIZONTAL
                jTabelaSolicitacao.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                // ALINHAR TEXTO DA TABELA CENTRALIZADO
                DefaultTableCellRenderer centralizado = new DefaultTableCellRenderer();
                centralizado.setHorizontalAlignment(SwingConstants.CENTER);
                //
                jTabelaSolicitacao.getColumnModel().getColumn(0).setCellRenderer(centralizado);
                jTabelaSolicitacao.getColumnModel().getColumn(1).setCellRenderer(centralizado);
            }
        } catch (Exception ex) {
            Logger.getLogger(TelaChamadoSuporte.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void MOSTRAR_DADOS_CODIGO_01() {
        DefaultTableModel dadosOrigem = (DefaultTableModel) jTabelaSolicitacao.getModel();
        try {
            for (SolicitacaoAtendimentoUsuarios dd : DAOs.PESQUISAR_CODIGO_01_read()) {
                pDATA_Registros = String.valueOf(dd.getDataSolicitacao());
                String dia = pDATA_Registros.substring(8, 10);
                String mes = pDATA_Registros.substring(5, 7);
                String ano = pDATA_Registros.substring(0, 4);
                pDATA_Registros = dia + "/" + mes + "/" + ano;
                jtotalRegistros.setText(Integer.toString(pTOTAL_registros));
                dadosOrigem.addRow(new Object[]{dd.getIdRegistroSolicitante(), pDATA_Registros, dd.getStatusSolicitacao(), dd.getNomeSolicitante()});
                // BARRA DE ROLAGEM HORIZONTAL
                jTabelaSolicitacao.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                // ALINHAR TEXTO DA TABELA CENTRALIZADO
                DefaultTableCellRenderer centralizado = new DefaultTableCellRenderer();
                centralizado.setHorizontalAlignment(SwingConstants.CENTER);
                //
                jTabelaSolicitacao.getColumnModel().getColumn(0).setCellRenderer(centralizado);
                jTabelaSolicitacao.getColumnModel().getColumn(1).setCellRenderer(centralizado);
            }
        } catch (Exception ex) {
            Logger.getLogger(TelaChamadoSuporte.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void MOSTRAR_DADOS_CODIGO_02() {
        DefaultTableModel dadosOrigem = (DefaultTableModel) jTabelaSolicitacao.getModel();
        try {
            for (SolicitacaoAtendimentoUsuarios dd : DAOs.PESQUISAR_CODIGO_02_read()) {
                pDATA_Registros = String.valueOf(dd.getDataSolicitacao());
                String dia = pDATA_Registros.substring(8, 10);
                String mes = pDATA_Registros.substring(5, 7);
                String ano = pDATA_Registros.substring(0, 4);
                pDATA_Registros = dia + "/" + mes + "/" + ano;
                jtotalRegistros.setText(Integer.toString(pTOTAL_registros));
                dadosOrigem.addRow(new Object[]{dd.getIdRegistroSolicitante(), pDATA_Registros, dd.getStatusSolicitacao(), dd.getNomeSolicitante()});
                // BARRA DE ROLAGEM HORIZONTAL
                jTabelaSolicitacao.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                // ALINHAR TEXTO DA TABELA CENTRALIZADO
                DefaultTableCellRenderer centralizado = new DefaultTableCellRenderer();
                centralizado.setHorizontalAlignment(SwingConstants.CENTER);
                //
                jTabelaSolicitacao.getColumnModel().getColumn(0).setCellRenderer(centralizado);
                jTabelaSolicitacao.getColumnModel().getColumn(1).setCellRenderer(centralizado);
            }
        } catch (Exception ex) {
            Logger.getLogger(TelaChamadoSuporte.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void MOSTRAR_DADOS_TIPO_SOLICITACAO_todos() {
        DefaultTableModel dadosOrigem = (DefaultTableModel) jTabelaSolicitacao.getModel();
        try {
            for (SolicitacaoAtendimentoUsuarios dd : DAOs.PESQUISAR_TODOS_TIPO_SOLICITACAO_read()) {
                pDATA_Registros = String.valueOf(dd.getDataSolicitacao());
                String dia = pDATA_Registros.substring(8, 10);
                String mes = pDATA_Registros.substring(5, 7);
                String ano = pDATA_Registros.substring(0, 4);
                pDATA_Registros = dia + "/" + mes + "/" + ano;
                jtotalRegistros.setText(Integer.toString(pTOTAL_registros));
                dadosOrigem.addRow(new Object[]{dd.getIdRegistroSolicitante(), pDATA_Registros, dd.getStatusSolicitacao(), dd.getNomeSolicitante()});
                // BARRA DE ROLAGEM HORIZONTAL
                jTabelaSolicitacao.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                // ALINHAR TEXTO DA TABELA CENTRALIZADO
                DefaultTableCellRenderer centralizado = new DefaultTableCellRenderer();
                centralizado.setHorizontalAlignment(SwingConstants.CENTER);
                //
                jTabelaSolicitacao.getColumnModel().getColumn(0).setCellRenderer(centralizado);
                jTabelaSolicitacao.getColumnModel().getColumn(1).setCellRenderer(centralizado);
            }
        } catch (Exception ex) {
            Logger.getLogger(TelaChamadoSuporte.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void MOSTRAR_DADOS_TIPO_solicitantes01() {
        DefaultTableModel dadosOrigem = (DefaultTableModel) jTabelaSolicitacao.getModel();
        try {
            for (SolicitacaoAtendimentoUsuarios dd : DAOs.PESQUISAR_TODOS_TIPO_SOLICITACAO01_read()) {
                pDATA_Registros = String.valueOf(dd.getDataSolicitacao());
                String dia = pDATA_Registros.substring(8, 10);
                String mes = pDATA_Registros.substring(5, 7);
                String ano = pDATA_Registros.substring(0, 4);
                pDATA_Registros = dia + "/" + mes + "/" + ano;
                jtotalRegistros.setText(Integer.toString(pTOTAL_registros));
                dadosOrigem.addRow(new Object[]{dd.getIdRegistroSolicitante(), pDATA_Registros, dd.getStatusSolicitacao(), dd.getNomeSolicitante()});
                // BARRA DE ROLAGEM HORIZONTAL
                jTabelaSolicitacao.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                // ALINHAR TEXTO DA TABELA CENTRALIZADO
                DefaultTableCellRenderer centralizado = new DefaultTableCellRenderer();
                centralizado.setHorizontalAlignment(SwingConstants.CENTER);
                //
                jTabelaSolicitacao.getColumnModel().getColumn(0).setCellRenderer(centralizado);
                jTabelaSolicitacao.getColumnModel().getColumn(1).setCellRenderer(centralizado);
            }
        } catch (Exception ex) {
            Logger.getLogger(TelaChamadoSuporte.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void MOSTRAR_DADOS_TIPO_solicitantes02() {
        DefaultTableModel dadosOrigem = (DefaultTableModel) jTabelaSolicitacao.getModel();
        try {
            for (SolicitacaoAtendimentoUsuarios dd : DAOs.PESQUISAR_TODOS_TIPO_SOLICITACAO02_read()) {
                pDATA_Registros = String.valueOf(dd.getDataSolicitacao());
                String dia = pDATA_Registros.substring(8, 10);
                String mes = pDATA_Registros.substring(5, 7);
                String ano = pDATA_Registros.substring(0, 4);
                pDATA_Registros = dia + "/" + mes + "/" + ano;
                jtotalRegistros.setText(Integer.toString(pTOTAL_registros));
                dadosOrigem.addRow(new Object[]{dd.getIdRegistroSolicitante(), pDATA_Registros, dd.getStatusSolicitacao(), dd.getNomeSolicitante()});
                // BARRA DE ROLAGEM HORIZONTAL
                jTabelaSolicitacao.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                // ALINHAR TEXTO DA TABELA CENTRALIZADO
                DefaultTableCellRenderer centralizado = new DefaultTableCellRenderer();
                centralizado.setHorizontalAlignment(SwingConstants.CENTER);
                //
                jTabelaSolicitacao.getColumnModel().getColumn(0).setCellRenderer(centralizado);
                jTabelaSolicitacao.getColumnModel().getColumn(1).setCellRenderer(centralizado);
            }
        } catch (Exception ex) {
            Logger.getLogger(TelaChamadoSuporte.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void MOSTRAR_STATUS_aberto() {
        DefaultTableModel dadosOrigem = (DefaultTableModel) jTabelaSolicitacao.getModel();
        try {
            for (SolicitacaoAtendimentoUsuarios dd : DAOs.PESQUISAR_TODOS_STATUS_read()) {
                pDATA_Registros = String.valueOf(dd.getDataSolicitacao());
                String dia = pDATA_Registros.substring(8, 10);
                String mes = pDATA_Registros.substring(5, 7);
                String ano = pDATA_Registros.substring(0, 4);
                pDATA_Registros = dia + "/" + mes + "/" + ano;
                jtotalRegistros.setText(Integer.toString(pTOTAL_registros));
                dadosOrigem.addRow(new Object[]{dd.getIdRegistroSolicitante(), pDATA_Registros, dd.getStatusSolicitacao(), dd.getNomeSolicitante()});
                // BARRA DE ROLAGEM HORIZONTAL
                jTabelaSolicitacao.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                // ALINHAR TEXTO DA TABELA CENTRALIZADO
                DefaultTableCellRenderer centralizado = new DefaultTableCellRenderer();
                centralizado.setHorizontalAlignment(SwingConstants.CENTER);
                //
                jTabelaSolicitacao.getColumnModel().getColumn(0).setCellRenderer(centralizado);
                jTabelaSolicitacao.getColumnModel().getColumn(1).setCellRenderer(centralizado);
            }
        } catch (Exception ex) {
            Logger.getLogger(TelaChamadoSuporte.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void MOSTRAR_STATUS_fechado() {
        DefaultTableModel dadosOrigem = (DefaultTableModel) jTabelaSolicitacao.getModel();
        try {
            for (SolicitacaoAtendimentoUsuarios dd : DAOs.PESQUISAR_TODOS_STATUS01_read()) {
                pDATA_Registros = String.valueOf(dd.getDataSolicitacao());
                String dia = pDATA_Registros.substring(8, 10);
                String mes = pDATA_Registros.substring(5, 7);
                String ano = pDATA_Registros.substring(0, 4);
                pDATA_Registros = dia + "/" + mes + "/" + ano;
                jtotalRegistros.setText(Integer.toString(pTOTAL_registros));
                dadosOrigem.addRow(new Object[]{dd.getIdRegistroSolicitante(), pDATA_Registros, dd.getStatusSolicitacao(), dd.getNomeSolicitante()});
                // BARRA DE ROLAGEM HORIZONTAL
                jTabelaSolicitacao.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                // ALINHAR TEXTO DA TABELA CENTRALIZADO
                DefaultTableCellRenderer centralizado = new DefaultTableCellRenderer();
                centralizado.setHorizontalAlignment(SwingConstants.CENTER);
                //
                jTabelaSolicitacao.getColumnModel().getColumn(0).setCellRenderer(centralizado);
                jTabelaSolicitacao.getColumnModel().getColumn(1).setCellRenderer(centralizado);
            }
        } catch (Exception ex) {
            Logger.getLogger(TelaChamadoSuporte.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void MOSTRAR_STATUS_andamento() {
        DefaultTableModel dadosOrigem = (DefaultTableModel) jTabelaSolicitacao.getModel();
        try {
            for (SolicitacaoAtendimentoUsuarios dd : DAOs.PESQUISAR_TODOS_STATUS02_read()) {
                pDATA_Registros = String.valueOf(dd.getDataSolicitacao());
                String dia = pDATA_Registros.substring(8, 10);
                String mes = pDATA_Registros.substring(5, 7);
                String ano = pDATA_Registros.substring(0, 4);
                pDATA_Registros = dia + "/" + mes + "/" + ano;
                jtotalRegistros.setText(Integer.toString(pTOTAL_registros));
                dadosOrigem.addRow(new Object[]{dd.getIdRegistroSolicitante(), pDATA_Registros, dd.getStatusSolicitacao(), dd.getNomeSolicitante()});
                // BARRA DE ROLAGEM HORIZONTAL
                jTabelaSolicitacao.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                // ALINHAR TEXTO DA TABELA CENTRALIZADO
                DefaultTableCellRenderer centralizado = new DefaultTableCellRenderer();
                centralizado.setHorizontalAlignment(SwingConstants.CENTER);
                //
                jTabelaSolicitacao.getColumnModel().getColumn(0).setCellRenderer(centralizado);
                jTabelaSolicitacao.getColumnModel().getColumn(1).setCellRenderer(centralizado);
            }
        } catch (Exception ex) {
            Logger.getLogger(TelaChamadoSuporte.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void BUSCAR_NOME_IP_desktop() {
        InetAddress myself;
        try {
            myself = InetAddress.getLocalHost();
            ipHostSRV = myself.getHostAddress();
            hostNameSRV = myself.getHostName();
        } catch (UnknownHostException ex) {
            Logger.getLogger(TelaSolicitacaoUsuario.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void BUSCAR_tecnico() {
        DAOs.LISTAR_TECNICOS_unidade(objSolicita);
    }

    public void objLog() {
        objLogSys.setDataMov(dataModFinal);
        objLogSys.setHorarioMov(horaMov);
        objLogSys.setNomeModuloTela(nomeModuloTela);
        objLogSys.setIdLancMov(Integer.valueOf(jIdRegistroSolicitante.getText()));
        objLogSys.setNomeUsuarioLogado(nameUser);
        objLogSys.setStatusMov(statusMov);
    }
}
